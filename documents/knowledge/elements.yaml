- modifier: "¿"
  name: Conditional Execution
  description: Execute an element if the top of the stack is truthy.
  arity: 1
  elements: 1
  tests:
      - program: "5 6 1 +¿"
        output: 11
      - program: "5 6 0 +¿"
        output: 6

- modifier: "¤"
  name: Last Element as a Function
  description: Pushes the last element as a lambda.
  arity: 0
  elements: 1
  # This needs to be a parser test

- modifier: "¢"
  name: Last Two Elements as a Function
  description: Pushes the last two elements as a lambda.
  arity: 0
  elements: 2
  # This needs to be a parser test

- modifier: "€"
  name: Last Three Elements as a Function
  description: Pushes the last three elements as a lambda.
  arity: 0
  elements: 3
  # This needs to be a parser test

- modifier: "§"
  name: Last Four Elements as a Function
  description: Pushes the last four elements as a lambda.
  arity: 0
  elements: 4
  # This needs to be a parser test

- modifier: "æ"
  name: Apply to Each Stack Item
  description: Apply an element to every item on the stack
  arity: varies
  elements: 1
  tests:
      - program: "1 2 3 4 dæ W"
        output: [2, 4, 6, 8]
      - program: "5 1 7 2 4 2+¢æ W"
        output: [7, 3, 9, 4, 6]

- element: "+"
  name: Addition / Concatenation
  description: Addition of two numbers / Concatenation of two strings
  arity: 2
  overloads:
      num-num: a + b
      num-str: to_string(a) + b
      str-num: a + to_string(b)
      str-str: a + b
  vectorise: true
  tests:
      - inputs: [0, 0]
        output: 0
      - inputs: [4, 2]
        output: 6
      - inputs: [5, 3]
        output: 8
      - inputs: [5, 0]
        output: 5
      - inputs: ["Hello", 7]
        output: "Hello7"
      - inputs: ["Hello", 5]
        output: "Hello5"
      - inputs: ["Hello", 0]
        output: "Hello0"
      - inputs: ["", 4]
        output: "4"
      - inputs: ["Hello, ", "World"]
        output: "Hello, World"
      - inputs: ["Hello, ", ["World", "!"]]
        output: ["Hello, World", "Hello, !"]

- element: "×"
  name: Multiplication / Ring Translate
  description: Multiply two numbers together / Repeat a string / Ring translate one string according to another
  arity: 2
  overloads:
      num-num: lhs * rhs
      num-str: rhs repeated lhs times
      str-num: lhs repeated rhs times
      str-str: ring translate rhs according to lhs
  vectorise: true
  tests:
      - inputs: [5, 20]
        output: 100
      - inputs: ["abc", 5]
        output: "abcabcabcabcabc"
      - inputs: [3, "abcde"]
        output: "abcdeabcdeabcde"
      - inputs: ["aeiou", "hello"]
        output: "alihu"

- element: "½"
  name: Halve
  description: Halve a number / Split a string into two halves
  arity: 1
  overloads:
      num: lhs / 2
      str: split lhs into two strings of equal lengths (as close as possible)
  vectorise: true
  tests:
      - inputs: [8]
        output: 4
      - inputs: ["FizzBuzz"]
        output: ["Fizz", "Buzz"]
      - inputs: [[1, 4, 8, "Vyxal", "Even Length "]]
        output: [0.5, 2, 4, ["Vyx", "al"], ["Even L", "ength "]]

- modifier: "]"
  name: Ternary If
  description: >-
      Pop the top of the stack as a condition, and if that value is considered
      truthy, execute the first element. Otherwise, execute the second element.
  arity: 1
  elements: 2
  tests:
      - program: '4 "Truthy""Falsey"]'
        output: "Truthy"
      - program: "5 0 NI]"
        output: -5